{
  "git": [
    {
      "id": 1,
      "text": "Как можно установить Git?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Можно через сайт или командную строку",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "Лишь через терминал (командную строку)",
          "isCorrect": false
        },
        { "id": 3, "text": "Лишь через официальный сайт", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Что такое GitHub?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Графический интерфейс для работы с Git",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Веб-сервис для хостинга IT-проектов",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "Технология для контроля версий проектов",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 3,
      "text": "Что такое Git?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Это облачное хранилище",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Это сервер для ваших проектов",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Это таск-менеджер",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это распределённая система управления версиями",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 4,
      "text": "Как в Git установить значение «Имя пользователя»?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "git config user.name",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "git config --global user.name",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "git user.name",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Все команды, кроме git user.name",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 5,
      "text": "Git и GitHub одно и тоже самое?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Да. Git это сокращение от GitHub",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Нет, это продукты разных компаний",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Оба продукта разработаны одной компанией, но они не одно и тоже",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "Это 2 разных продукта, разработанные разными компаниями",
          "isCorrect": true
        }
      ]
    },
    {
      "id": 6,
      "text": "Как в Git установить глобально Email пользователя?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "git config --global user.email",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "git user.email",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "git --global user.email",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "git config user.email",
          "isCorrect": false
        },
        {
          "id": 5,
          "text": "git config-global user.email",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Как создать новую ветку с именем dev?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "git create subtree dev",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "git create dev",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "git branch dev",
          "isCorrect": true
        },
        {
          "id": 4,
          "text": "git new dev",
          "isCorrect": false
        },
        {
          "id": 5,
          "text": "git branch new dev",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 8,
      "text": "Какой текстовый редактор используется по умолчанию в git?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": " Установленный по умолчанию в системе",
          "isCorrect": true
        },
        {
          "id": 2,
          "text": "emacs",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "notepad",
          "isCorrect": false
        },
        {
          "id": 4,
          "text": "vim ",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 9,
      "text": "Как проиндексировать несколько файлов одной командой?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "git add TEXT1.txt ADD TEXT2.txt ADD TEXT3.txt",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "git add TEXT1.txt TEXT2.txt TEXT3.txt",
          "isCorrect": true
        },
        {
          "id": 3,
          "text": "git add TEXT1.txt, TEXT2.txt, TEXT3.txt",
          "isCorrect": false
        }
      ]
    }
  ],
  "general": [
    {
      "id": 1,
      "text": "С какими системами контроля версий вы знакомы?",
      "hasOptions": false,
      "answer": "Наиболее известные системы контроля версий это Git, SVN и Mercurial."
    },
    {
      "id": 2,
      "text": "Что означает CORS и какую проблему решает?",
      "hasOptions": false,
      "answer": "Cross-origin resource sharing (CORS) предоставляет веб-серверам возможность контролировать междоменные запросы и позволяет производить безопасный обмен данными между разными доменами."
    },
    {
      "id": 3,
      "text": "Что происходит после ввода адреса сайта в строке браузера?",
      "hasOptions": false,
      "answer": "Вы вводите адрес в строку адреса в браузере. Браузер ищет в своём кэше запись о DNS сервере соответствующего IP-адреса. Если запрашиваемого URL нет в кэше, DNS сервер провайдера отправляет DNS запрос серверу, на котором хостится необходимый вебсайт.Браузер инициализирует TCP соединение с сервером. Как только браузер получил верный IP адрес, он создаёт соединение для передачи информации. В большинстве случаев браузеры используют TCP протокол для любых HTTP запросов. Компьютер клиента посылает серверу SYN запрос, чтобы узнать открыт ли сервер для новых соединений. Если у сервера есть открытые порты для новых соединений, он отвечает пакетом SYN/ACK. Клиент получает от сервера SYN/ACK пакет и подтверждает соединение, отослав ACK пакет."
    },
    {
      "id": 4,
      "text": "Почему лучше загружать ресурсы для сайта с нескольких доменов?",
      "hasOptions": false,
      "answer": "Браузеры имеют ограничение на количество одновременно загружаемых ресурсов с одного домена. В современных браузерах это количество равно 6, но есть способы обойти ограничение в настройках браузера. Использование дополнительных доменов для раздачи статических ресурсов позволяет браузеру загружать их параллельно, что приведёт к повышению быстродействия фронтенда."
    },
    {
      "id": 5,
      "text": "Что такое HTTP-методы?",
      "hasOptions": false,
      "answer": "HTTP определяет множество методов запроса, которые указывают, какое желаемое действие выполнится для данного ресурса. Несмотря на то, что их названия могут быть существительными, эти методы запроса иногда называются HTTP глаголами. Каждый реализует свою семантику, но каждая группа команд разделяет общие свойства: так методы могут быть безопасными, идемпотентными или кэшируемыми. Примеры: Метод GET запрашивает представление ресурса, Метод HEAD запрашивает ресурс так же, как и метод GET, но без тела ответа. POST используется для отправки сущностей к определённому ресурсу. Часто вызывает изменение состояния или какие-то побочные эффекты на сервере."
    },
    {
      "id": 6,
      "text": "Какие инструменты вы используете, чтобы найти недостатки в производительности вашего кода?",
      "hasOptions": false,
      "answer": "Chrome Dev Tools — Вкладки Performance и Network."
    },
    {
      "id": 7,
      "text": "Объясните разницу между раскладкой (layout), painting и композитингом (compositing).",
      "hasOptions": false,
      "answer": "Layout: расчёт места для объекта на основе правил. Paint: рисовка пикселей для отображения визуальных элементов. Compositing: рисовка слоёв в правильном порядке (правильное наложение и т.д.)."
    },
    {
      "id": 8,
      "text": "Какие инструменты вы будете использовать для тестирования работоспособности своего кода?",
      "hasOptions": false,
      "answer": "Browserstack для тестирования кроссбраузерности."
    },
    {
      "id": 9,
      "text": "В чём различие между юнит-тестами и функциональными/интеграционными тестами?",
      "hasOptions": false,
      "answer": "Юнит-тест тестирует на правильную работу небольшие куски кода. Функциональный тест проверяет, что результат выполнения функции соответствует введённым данным. Интеграционный тест проверяет несколько частей кода на слаженную совместную работу."
    },
    {
      "id": 10,
      "text": "Для чего предназначены линтеры (code style linting tool)?",
      "hasOptions": false,
      "answer": "Линтеры нужны для проверки кода на программные и стилистические ошибки."
    },
    {
      "id": 11,
      "text": "Что такое AJAX?",
      "hasOptions": false,
      "answer": "Как добавить что-то новое на страницу без перезагрузки. Когда мы делали форму обратной связи на сайте, то она работала так: вы вводите сообщение и нажимаете «отправить»; загружается новая страница с подтверждением отправки. Часто это неудобно: хочется оставить посетителя на странице, а не показывать что-то новое. Чтобы сделать именно так, используют AJAX. AJAX (программисты называют его «аякс») — это сокращение от Asynchronous Javascript and XML, а на русский это переводится как «Асинхронный JavaScript и XML». Смысл здесь — в асинхронности действий браузера и сервера. Разберём эти понятия."
    },
    {
      "id": 12,
      "text": "Перечислить плюсы и минусы использования Ajax",
      "hasOptions": false,
      "answer": "Плюсы: Удобство для посетителя и быстрый интерфейс. Меньше трафика.Можно снизить нагрузку на сервер. Минусы: Нужен включённый JavaScript. Поисковые движки не видят AJAX-контент. Растёт сложность проекта.  Ошибки при нестабильной связи"
    },
    {
      "id": 13,
      "text": "Чем отличаются json, xml, yml",
      "hasOptions": false,
      "answer": "XML – это eXtensible Markup Language, что в переводе значит «расширенный язык разметки». Фактически, это способ записи данных в структурированном виде. JSON первая альтернатива XML - JavaScript Object Notation. Проще работать т.к нет открывающих и закрывающих тегов.  Основное его преимущество – в простоте обработки JSON-данных на стороне клиента. YAML вторая альтернатива XML. - YAML Ain't Markup Language. Чем отличается от XML? Компактностью представления данных и удобством их редактирования для человека. Поддержка множества документов - документы разделяются тройным дефисом. Возможность добавления комментариев. Реализована явная и неявнаяя типизация."
    }
  ],
  "html": [
    {
      "id": 1,
      "text": "Какой тег используется для создания ссылки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Какой тег используется для вставки изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Какой тег находится в <html> и определяет заголовок документа?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Какой атрибут используется для определения альтернативного текста изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Какой атрибут позволяет открыть ссылку в новой вкладке?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Для чего используется атрибут 'placeholder'?",
      "hasOptions": false,
      "answer": "Атрибут 'placeholder' используется для отображения текстовой подсказки или примера ввода в поле формы до того, как пользователь начнет вводить свои данные."
    },
    {
      "id": 7,
      "text": "Как создать непронумерованный список в HTML?",
      "hasOptions": false,
      "answer": "Для создания такого списка в HTML используется тег <code>ul</code>, а для определения каждого пункта списка - тег <code>li</code>."
    },
    {
      "id": 8,
      "text": "Что такое HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) - это стандартизированный язык разметки, который используется для создания и разработки веб-страниц. Это система для разметки отдельных частей веб-страницы с использованием тегов, заключенных в угловые скобки."
    },
    {
      "id": 9,
      "text": "Что делает тег <!DOCTYPE>?",
      "hasOptions": false,
      "answer": "Это декларация, которая информирует веб-браузер о версии языка разметки, использованной при создании веб-страницы. Это помогает браузеру корректно отобразить страницу."
    },
    {
      "id": 10,
      "text": "Какой тег используется для создания таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой тег используется для создания заголовка таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой тег используется для создания строки таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Какой тег используется для создания ячейки таблицы?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Что такое семантические теги в HTML?",
      "hasOptions": false,
      "answer": "Семантические теги в HTML - это теги, которые передают информацию о смысле или назначении содержимого, а не только о его внешнем виде. Примеры семантических тегов: header, footer, article, section, nav и др. Они помогают создавать более структурированные и доступные веб-страницы."
    },
    {
      "id": 15,
      "text": "Какой атрибут используется для установки фонового изображения?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Какой тег используется для создания выпадающего списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Какой тег используется для вставки JavaScript кода в HTML документ?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Какой атрибут используется для указания пути к изображению?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "Что делает атрибут 'readonly' в элементе формы?",
      "hasOptions": false,
      "answer": "Атрибут 'readonly' делает элемент формы только для чтения, что значит, что пользователь не может изменять значение элемента, но может просматривать его. Это может быть полезно, если вы хотите отобразить информацию, которая не должна быть изменена."
    },
    {
      "id": 20,
      "text": "Что такое веб-стандарты и зачем они нужны?",
      "hasOptions": false,
      "answer": "Веб-стандарты - это рекомендации, разработанные группами стандартов, такими как W3C или WHATWG, для обеспечения совместимости и устойчивости веб-технологий. Они включают рекомендации по HTML, CSS, JavaScript и другим веб-технологиям. Соблюдение веб-стандартов помогает обеспечить корректную работу веб-страниц в различных браузерах и устройствах, а также облегчить обслуживание и расширение веб-сайтов в будущем."
    },
    {
      "id": 21,
      "text": "Что такое отзывчивый (responsive) веб-дизайн?",
      "hasOptions": false,
      "answer": "Это подход к веб-дизайну, который позволяет веб-страницам корректно отображаться и функционировать на различных устройствах, включая мобильные телефоны, планшеты и настольные компьютеры, путем использования гибких макетов, гибких изображений и CSS медиазапросов для адаптации дизайна к различным размерам экрана и характеристикам устройств."
    },
    {
      "id": 22,
      "text": "Какой тег HTML используется для вставки видео?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Какой тег используется для создания главного заголовка на веб-странице?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "Что делает тег <br>?",
      "hasOptions": false,
      "answer": "Он спользуется для переноса строки, что позволяет создать новую строку в том месте, где он размещен. Это удобный способ управления расположением текста на веб-странице без использования дополнительных стилей или элементов."
    },
    {
      "id": 25,
      "text": "Какой тег используется для создания упорядоченного списка?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "Что такое DOM в контексте веб-разработки?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) - это программный интерфейс для веб-документов. Это представление структурированного документа в виде объектной модели, которое позволяет программам и скриптам взаимодействовать с содержимым, структурой и стилями веб-страницы. DOM представляет документ как дерево объектов, каждый из которых соответствует части страницы."
    },
    {
      "id": 27,
      "text": "Какой атрибут используется для определения стилей элемента на странице?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "Что такое атрибут 'alt' в теге <img>?",
      "hasOptions": false,
      "answer": "Он используется для предоставления альтернативного текста, который будет отображаться в случае, если изображение не может быть загружено. Это также может быть полезно для обеспечения доступности, поскольку скрин-ридеры могут использовать этот текст для описания изображения пользователям с ограниченными возможностями."
    },
    {
      "id": 29,
      "text": "Какая разница между элементами <span> и <div>?",
      "hasOptions": false,
      "answer": "<span> — это строчный (inline) элемент. <div> — это блочный (block) элемент."
    },
    {
      "id": 30,
      "text": "Что такое мета-теги?",
      "hasOptions": false,
      "answer": "Мета-теги — это теги, находящиеся в теге страницы <head> и описывающие содержимое страницы. Мета-теги не выводятся на странице. Они имеются лишь в её коде. Их основная задача заключается в том, чтобы кратко описывать содержимое страниц поисковым системам."
    },
    {
      "id": 31,
      "text": "Что такое теги?",
      "hasOptions": false,
      "answer": "Это HTML элементы для правильного определения и форматирования содержимого. В нем используются символы «меньше» (<) и «больше» (>). В качестве закрывающего тега также используется косая черта."
    },
    {
      "id": 32,
      "text": "Разница между cookie, sessionStorage и localStorage",
      "hasOptions": false,
      "answer": "cookie, sessionStorage и localStorage — это технологии для хранения данных на стороне клиента в браузере. Однако, у них есть различия в использовании и хранении данных. cookie — небольшой фрагмент данных, который отправляется сервером в браузер, а затем сохраняется в браузере клиента. Cookie могут храниться в течение определённого периода времени, определяемого сервером. Они используются для сохранения пользовательских настроек, данных авторизации и другой информации о пользователях. sessionStorage — объект, который позволяет сохранять данные в браузере на время сессии, т.е. пока вкладка браузера открыта. Данные сохраняются в виде пары ключ-значение, и они могут быть использованы для сохранения состояния приложения или другой информации, которая должна быть доступна только в течение сессии. localStorage — объект, который позволяет сохранять данные в браузере на неопределенный период времени, т.е. данные будут доступны даже после закрытия браузера и перезагрузки компьютера. Данные также сохраняются в виде пары ключ-значение и могут быть использованы для сохранения состояния приложения или другой информации, которая должна быть доступна в любое время."
    },
    {
      "id": 33,
      "text": "Что такое прогрессивная отрисовка?",
      "hasOptions": false,
      "answer": "Прогрессивная отрисовка — это метод веб-разработки, который позволяет поэтапно отображать содержимое веб-страницы по мере его загрузки. Сначала отображается минимальное количество информации, а затем дополнительные элементы и детали добавляются по мере загрузки страницы."
    },

    {
      "id": 34,
      "text": "Как реализовать отложенную загрузку изображений?",
      "hasOptions": false,
      "answer": "Отложенная загрузка изображений — это способность страницы загружать изображения только тогда, когда они понадобятся пользователю. Lazy Loading — техника, которая позволяет отложить загрузку изображений, находящихся за пределами видимой области. Атрибуты data- — Вы можете использовать атрибут data- вместе с атрибутом src, чтобы отложить загрузку изображения"
    },
    {
      "id": 35,
      "text": "Можете ли вы описать некоторые методы SEO, которые Вы использовали?",
      "hasOptions": false,
      "answer": "Уникальные теги <title> и <description> <content>/ Про то, что нельзя забывать теги заголовков <h1>, <h2>, <h3>. Атрибут alt у изображений. Валидация вёрстки. Например на этом сайте."
    },

    {
      "id": 36,
      "text": "Если у вас 5 разных файлов со стилями, как их лучше подключить к проекту?",
      "hasOptions": false,
      "answer": "Лучше всего соединить все 5 файлов в один (например, с помощью gulp) и подключить этот файл. Это уменьшает количество запросов к серверу."
    },
    {
      "id": 37,
      "text": "Можете ли вы описать разницу между прогрессивным улучшением (progressive enhancement) и изящной деградацией (graceful degradation)?",
      "hasOptions": false,
      "answer": "Прогрессивное улучшение - разработка приложения, начиная с самых простых вещей, которые будут работать во всех браузерах. Постепенное добавление новых технологий. Изящная деградация - разработка приложения с использованием самых современных технологий. Далее делаются фолбэки для старых браузеров."
    },
    {
      "id": 38,
      "text": "что такое fallback в верстке?",
      "hasOptions": false,
      "answer": "Вы пытаетесь оставить резервный вариант для отображения того или иного элемента в случае проблем с отображением стилей, работой javascript или jquery. в разных браузерах. "
    },
    {
      "id": 39,
      "text": "Как можно оптимизировать загрузку внешних ресурсов на странице?",
      "hasOptions": false,
      "answer": "Внешние файлы js подключать внизу страницы перед закрывающие тегом </body>. Внешние .js-файлы блокируют параллельную загрузку. Спецификация HTTP/1.1 советует, чтобы браузеры параллельно загружали не более 2-х компонентов веб-страницы с одного хоста. Таким образом, если картинки для вашего сайта располагаются на разных хостах, вы получите более 2-х параллельных загрузок. А когда загружается скрипт, браузер не будет начинать никаких других загрузок, даже с других хостов."
    },
    {
      "id": 40,
      "text": "Как можно оптимизировать загрузку внешних ресурсов на странице?",
      "hasOptions": false,
      "answer": "Внешние файлы js подключать внизу страницы перед закрывающие тегом </body>. Внешние .js-файлы блокируют параллельную загрузку. Спецификация HTTP/1.1 советует, чтобы браузеры параллельно загружали не более 2-х компонентов веб-страницы с одного хоста. Таким образом, если картинки для вашего сайта располагаются на разных хостах, вы получите более 2-х параллельных загрузок. А когда загружается скрипт, браузер не будет начинать никаких других загрузок, даже с других хостов."
    },
    {
      "id": 41,
      "text": "Назовите три способа уменьшения времени загрузки страницы (воспринимаемого или реального)",
      "hasOptions": false,
      "answer": "Реальные способы: Минифицировать и соединить CSS. Минифицировать и соединить JS. Оптимизировать изображения. Сжать изображения без видимых потерь качества. Сшить иконки в спрайты для уменьшения количества запросов к серверу. Воспринимаемый: Вставить критичный CSS в тег <head>. Критичный CSS - это минимальный набор блокирующего CSS, требуемого для рендеринга первого экрана с контентом пользователю."
    },
    {
      "id": 42,
      "text": "Какие вы знаете способы улучшения производительности при скроллинге на вебсайте?",
      "hasOptions": false,
      "answer": "Для улучшения производительности при скроллинге можно сделать: Загружать изображения по мере их появленя - Lazy load. Кэшировать изображения по приоритету загрузки. Оптимизировать изображения."
    },
    {
      "id": 43,
      "text": "Какая разница между Inline и Block элементами?",
      "hasOptions": false,
      "answer": "Вот вкратце: блочные элементы block расширяются горизонтально, чтобы занять целую строку (например, заголовок). Мы можем применить к ним вертикальные отступы. встроенные элементы inline расширяются горизонтально ровно настолько, чтобы вместить содержимое (например, элементы strong или em). Мы не можем применить к ним вертикальные отступы, и они обычно должны быть помещены внутрь блочного элемента. встроенные блочные элементы inline-block похожи на встроенные элементы, но к ним можно применить вертикальные отступы (что делает их полезными для таких объектов, как кнопки). "
    },
    {
      "id": 44,
      "text": "Что такое объекты и прототипы объектов в JavaScript",
      "hasOptions": false,
      "answer": "JavaScript часто описывают как язык прототипного наследования — каждый объект, имеет объект-прототип, который выступает как шаблон, от которого объект наследует методы и свойства. Прототип — это объект, предоставляющий другим объектам общие (shared) свойства. Прототип позволяет указать какие свойства будут доступны созданным от него объектам, а также предоставляет доступ к своему собственному прототипу. При попытке обратиться к свойству, которое не определено в самом объекте, производится поиск в прототипе объекта, а затем в прототипе прототипа и далее, пока искомое свойство не будет найдено или не будет достигнут конец цепочки прототипов (prototype chain), так как у базового объекта Object.prototype прототипом является null."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "В чем разница между «сбросом» и «нормализацией» CSS? Что бы вы выбрали и почему?",
      "hasOptions": false,
      "answer": "Сброс (reset) сбрасывает все встроенные в браузер стили элементов. Normalize приводит стили к единому виду во всех браузерах. Лучше использовать Normalize из-за кроссбраузерности."
    },
    {
      "id": 2,
      "text": "Что такое специфичность селекторов CSS и как она работает?",
      "hasOptions": false,
      "answer": "Специфичность селектора (еще называют весом) это свойство определяющее приоритет стилевого правила, то есть то, какой стиль будет применен к HTML элементу в итоге. Например, используя какую-нибудь UI библиотеку, элементам этой библиотеки будут применены правила заданные авторами по умолчанию. При необходимости можно поменять стили на свои, «перебив» дефолтные более специфичным селектором.\n\nПодробнее тут: <a href='https://developer.mozilla.org/ru/docs/Web/CSS/Specificity' target='_blank'>Специфичность (MDN)</a>"
    },
    {
      "id": 3,
      "text": "Что такое CSS?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) - это язык стилей, используемый для описания внешнего вида и форматирования документа, написанного на языке разметки, таком как HTML. CSS позволяет разработчикам управлять макетом, шрифтами, цветами и другими стилистическими аспектами веб-страницы."
    },
    {
      "id": 4,
      "text": "Почему, как правило, лучше разместить подключение CSS в <head>, а <script> перед тэгом </body>? Знаете ли вы какие-либо исключения, приведите примеры?",
      "hasOptions": false,
      "answer": "Стили рекомендуется подключать в head для того, чтобы страница как можно быстрее приняла свой внешний вид. Скрипты подключенные в head могут затормозить этот процесс, в связи с этим их рекомендуется подключать перед закрывающим тегом body. Исключением являются скрипты аналитики, для определения количества посетителей, которые не дождались загрузки страницы. В этом случае скрипт должен быть подключен в head."
    },
    {
      "id": 5,
      "text": "Что делает свойство 'z-index' в CSS?",
      "hasOptions": false,
      "answer": "Свойство 'z-index' в CSS контролирует стековый порядок элементов по оси Z. Элемент с большим значением 'z-index' будет отображаться поверх элемента с меньшим значением 'z-index'."
    },
    {
      "id": 6,
      "text": "Какие есть способы отцентровать div?",
      "hasOptions": false,
      "answer": "Существует несколько способов отцентровать div в CSS, вот некоторые из них: \n1. Использование свойств margin и auto: `margin: 0 auto;`.\n2. Использование Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Использование Grid Layout: `display: grid; place-items: center;`.\n4. Использование свойств text-align и inline-block: `text-align: center;` на родительском элементе и `display: inline-block;` на самом div.`."
    },
    {
      "id": 7,
      "text": "Какое свойство используется для установки цвета фона?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Какое свойство позволяет установить внешние отступы элемента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Какое свойство используется для установки шрифта?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Какое свойство CSS позволяет контролировать видимость элемента в DOM, но при этом сохраняет его место?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какое свойство CSS используется для установки теней элементов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой селектор выбирает все элементы .child, которые являются непосредственными дочерними элементами .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, начинающийся с определенной строки?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Какой селектор CSS выбирает все элементы, которые имеют указанный атрибут, заканчивающийся определенной строкой?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    },
    {
      "id": 15,
      "text": "Какая разница между селекторами идентификаторов и классов в CSS?",
      "hasOptions": false,
      "answer": "Идентификаторы (id) уникальны. У элемента может быть только один идентификатор. На странице может присутствовать лишь один элемент с конкретным идентификатором. Имена классов (class) не являются уникальными. Один и тот же класс можно назначать множеству элементов. Элементу может быть назначено несколько классов. Если некий стиль нужно применить к нескольким элементам страницы — эту задачу нужно решать с использованием классов."
    },
    {
      "id": 16,
      "text": "Что такое псевдоклассы в CSS?",
      "hasOptions": false,
      "answer": "В CSS псевдоклассы используются для описания стилей элементов, находящихся в особых состояниях. Псевдоклассы можно использовать совместно с CSS-селекторами для настройки внешнего вида элементов на основе их состояний."
    },
    {
      "id": 17,
      "text": "Какая разница между следующими видами позиционирования элементов: относительное, фиксированное, абсолютное, статическое?",
      "hasOptions": false,
      "answer": "Относительное позиционирование — это когда элемент смещается относительно его положения, задаваемого по умолчанию. Фиксированное позиционирование — это когда настраивают положение элемента, ориентируясь на края окна браузера. Абсолютное позиционирование — это размещение элемента относительно ближайшего позиционированного родительского элемента, причём, именно там, где указано разработчиком. Статическое позиционирование — это режим позиционирования, применяемый по умолчанию, при использовании которого элементы выводятся в том порядке, в котором они описаны в документе."
    },
    {
      "id": 18,
      "text": "Разница между «сбросом» и «нормализацией» CSS?",
      "hasOptions": false,
      "answer": "Сброс CSS и нормализация CSS — это два разных подхода к обнулению стилей веб-страницы. Сброс CSS — это процесс обнуления стилей, чтобы убрать браузерные стили по умолчанию, которые могут отличаться от одного браузера к другому. Цель сброса CSS — создать «чистую» страницу, на которой все элементы имеют одинаковый вид в разных браузерах. Нормализация CSS — это процесс создания единообразных стилей для разных элементов, чтобы веб-страница выглядела одинаково во всех браузерах. В отличие от сброса CSS, нормализация CSS сохраняет некоторые стили по умолчанию браузера, но при этом пытается сделать их единообразными."
    },
    {
      "id": 19,
      "text": "Что такое FOUC (Flash Of Unstyled Content)? Как его избежать?",
      "hasOptions": false,
      "answer": "FOUC (Flash Of Unstyled Content) - это появление неоформленного контента при загрузке. Избежать его можно путём вставки критичного CSS в тег <head>. Критичный CSS — это минимальный набор блокирующего CSS, требуемого для рендеринга первого экрана с контентом пользователю. Также можно скрыть весь контент, пока не загрузится CSS."
    },
    {
      "id": 20,
      "text": "Какие преимущества и недостатки у CSS и JavaScript анимаций?",
      "hasOptions": false,
      "answer": "CSS: Плюсы - Простота. Минусы - Ограниченные возможности. JS: Плюсы - Позволяет полностью контролировать анимацию. Рекомендуется выбрать одну из множества JS-библиотек. Минусы - Сложность."
    },
    {
      "id": 21,
      "text": "что такое плавающие элементы (floats) и как они работают?",
      "hasOptions": false,
      "answer": "При применении этого свойства происходит следующее: Элемент позиционируется как обычно, а затем вынимается из документа потока и сдвигается влево (для left) или вправо (для right) до того как коснётся либо границы родителя, либо другого элемента с float. Если пространства по горизонтали не хватает для того, чтобы вместить элемент, то он сдвигается вниз до тех пор, пока не начнёт помещаться. Другие непозиционированные блочные элементы без float ведут себя так, как будто элемента с float нет, так как он убран из потока. Строки (inline-элементы), напротив, «знают» о float и обтекают элемент по сторонам."
    }
  ],
  "javascript": [
    {
      "id": 1,
      "text": "Что такое чистая функция?",
      "hasOptions": false,
      "answer": "Это функция, которая возвращает одинаковый результат, когда вызывается с одним и тем же набором аргументов, а также не имеет побочных эффектов (side effects)"
    },
    {
      "id": 2,
      "text": "Что такое замыкание?",
      "hasOptions": false,
      "answer": "Замыкания – это способность функции запоминать лексическое окружение, в котором она была создана, то есть хранить в себе ссылку на это окружение и обращаться к нему.\n\n<a href='https://youtu.be/mI6Jcfsgma4?si=46DV3mXPF6mDTTPs' target='_blank'>Подробнейшее видео про замыкание</a>"
    },
    {
      "id": 3,
      "text": "let VS const: почему лучше использовать const, когда это возможно?",
      "hasOptions": false,
      "answer": "Использование const дает два преимущества:\n1) Безопасность: объявление переменных через const защищает от неожиданного изменения значения переменной в коде, что может часто приводит к ошибкам и неожиданному поведению программы.\n2) Читаемость: использование const позволяет читателю кода понимать, что значение переменной не будет изменяться в течение выполнения программы. Это делает код более понятным и уменьшает возможность ошибок.\n\nПодробнее: <a href='https://youtu.be/07FllcTRj84?si=q7v60ZvHYBoRSSen' target='_blank'>Видео про VAR/LET/CONST</a>"
    },
    {
      "id": 4,
      "text": "Что такое промисы (Promises) в JavaScript?",
      "hasOptions": false,
      "answer": "Промисы – это объекты, которые представляют результат асинхронной операции. Они могут находиться в одном из трех состояний: ожидание (pending), выполнено (fulfilled) или отклонено (rejected)."
    },
    {
      "id": 5,
      "text": "Что такое деструктуризация в JavaScript?",
      "hasOptions": false,
      "answer": "Деструктуризация позволяет извлекать отдельные свойства из объектов или элементы из массивов и присваивать их переменным в более удобной форме. Например, вот так мы можем одной строкой извлечь имя и адрес пользователя из объекта user:\n<code>const {name, address} = user;</code>"
    },
    {
      "id": 6,
      "text": "Что такое стрелочные функции в JavaScript?",
      "hasOptions": false,
      "answer": "Стрелочные функции — это синтаксически компактный способ записи функций в JavaScript, который не имеет своего собственного 'this'. Они часто используются для создания анонимных функций.\n\n<a href='https://youtu.be/nGVYdna4kq4?si=1k0J9F-MYxWCaq6M' target='_blank'>Подробное видео про функции в JS</a>"
    },
    {
      "id": 7,
      "text": "Что такое hoisting в JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting — это механизм в JavaScript, при котором переменные и объявления функций перемещаются на верх своей области видимости перед выполнением кода."
    },
    {
      "id": 8,
      "text": "Какой метод используется для добавления элемента в массив?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Какой объект представляет текущее окно браузера?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Какой оператор используется для сравнения на строгое равенство?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Какой метод используется для удаления последнего элемента из массива?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой метод в JavaScript используется для преобразования объекта в строку JSON?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Какой объект в JavaScript используется для работы с датой и временем?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Какой метод массива в JavaScript используется для фильтрации элементов по определенному критерию?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    },
    {
      "id": 15,
      "text": "Что такое поднятие переменных и функций в JavaScript?",
      "hasOptions": false,
      "answer": "Поднятие переменных и функций (hoisting) — это перемещение их объявлений в верхнюю часть их области видимости (глобальной области видимости или области видимости функции)."
    },
    {
      "id": 16,
      "text": "Какие значения в JavaScript являются ложными?",
      "hasOptions": false,
      "answer": "В JavaScript ложными являются значения, которые, при преобразовании их к логическому типу, становятся значениями false. Это — такие значения как: ковычки, 0, null, NaN, false."
    },
    {
      "id": 17,
      "text": "Разница между let, var и const?",
      "hasOptions": false,
      "answer": "let, var и const — это ключевые слова, используемые в JavaScript для объявления переменных. var долгое время был основным способом объявления переменных в JavaScript до появления let и const. var имеет область видимости функции и может быть изменен в любом месте в этой функции."
    },
    {
      "id": 18,
      "text": "Что такое NaN?",
      "hasOptions": false,
      "answer": "Это специальное значение в JavaScript, которое означает «не число» (Not-a-Number). Возможные причины, по которым значение становится NaN: Попытка выполнить математическую операцию с нечисловым значением. Попытка выполнить математическую операцию, результат которой не может быть представлен числом, например деление нуля на ноль или вычисление квадратного корня из отрицательного числа. Преобразование строки в число, если строка не является валидным числом."
    },
    {
      "id": 19,
      "text": "Что такое Event loop?",
      "hasOptions": false,
      "answer": "это механизм в JavaScript, который позволяет выполнить асинхронный код и обрабатывать события, такие как клики мыши, нажатия клавиш и таймеры."
    },
    {
      "id": 20,
      "text": "В чём разница между .call и .apply?",
      "hasOptions": false,
      "answer": "Методы .call() и .apply() используются для вызова функции с заданным значением this, а также для передачи аргументов в функцию. Основная разница между ними заключается в способе передачи аргументов. Метод .call() принимает список аргументов, переданных в функцию через запятую. В то же время, метод .apply() принимает массив аргументов, переданных в функцию. "
    },
    {
      "id": 21,
      "text": "Какие методы для повышения производительности используются при создании или обслуживании сайта?",
      "hasOptions": false,
      "answer": "async и defer. async - для всех внешних скиптов, которым не нужно знать о HTML (google analytics, tracking scripts). Загружается вместе с html, после своей загрузки приостанавливает загрузку html, выполняется. Затем возобновляется загрузка html. defer - для внешних скриптов, которые не очень важны Загружается вместе с html, ждет пока html загрузится до конца. Потом выполняется. Оптимизация изображений. Конкатенация и углификация файлов. Инлайновый CSS. Стили вставляются инлайном в HTML."
    },
    {
      "id": 22,
      "text": "Как объекты преобразуются в примитивы?",
      "hasOptions": false,
      "answer": "Что произойдёт, если сложить два объекта obj1 + obj2, вычесть один из другого obj1 - obj2 или вывести их на экран, воспользовавшись alert(obj)? JavaScript совершенно не позволяет настраивать, как операторы работают с объектами. В случае таких операций, объекты автоматически преобразуются в примитивы, затем выполняется сама операция над этими примитивами, и на выходе мы получим примитивное значение."
    },
    {
      "id": 23,
      "text": "Что такое bind/call/apply?",
      "hasOptions": false,
      "answer": "apply - вызов функции с переменным количеством аргументов и с подменой контекста. call - вызов функции с подменой контекста. bind - создаёт обёртку над функцией, которая подменяет контекст этой функции. Поведение похоже на call и apply, но, в отличие от них, bind не вызывает функцию, а лишь возвращает обёртку, которую можно вызвать позже"
    },
    {
      "id": 24,
      "text": "Что выведет в консоль следующий код? \nconst numbers = [1, 2, 3, 4, 5]; \nconst [y] = numbers; \nconsole.log(y);",
      "hasOptions": false,
      "answer": "Ответ: 1. Пояснение: В данном примере выполнена деструктуризация. По умолчанию переменной у присваивается значение первого элемента массива."
    },
    {
      "id": 25,
      "text": "Что выведет на экран следующий код? \nfunction b(x, y, a) { \narguments[2] = 10; \nalert(a); \n} \nb(1, 2, 3);",
      "hasOptions": false,
      "answer": "Ответ: 10. Пояснение: В функции b 3 аргумента, индексы которых начинаются с [0]. Таким образом, аргумент с индексом [2]  — это a. В первой строке функции третьему аргументу функции присваивается значение 10."
    },
    {
      "id": 26,
      "text": "Что выведет на экран следующий код? \nconsole.log(false == undefined); \nconsole.log(false == null); \nconsole.log(null == undefined);",
      "hasOptions": false,
      "answer": "Ответ: false false true Пояснение: == сравнивает на равенство и не проверяет идентичность типов, поэтому в третьей строке кода в консоль будет выведено значение true."
    },
    {
      "id": 27,
      "text": "Что выведет на экран следующий код? \nlet x = 3; \nfunction fn() { \nx = 10; \nreturn; \nfunction x() {} \n} \nfn(); \nconsole.log(x);",
      "hasOptions": false,
      "answer": "Ответ:  3 Пояснение:  х объявлена как функция, поэтому в итоге она перезаписалась с 10 на 3."
    }
  ],
  "react": [
    {
      "id": 1,
      "text": "Что такое React JS?",
      "hasOptions": false,
      "answer": "React JS, или просто React, это открытая библиотека JavaScript для создания пользовательских интерфейсов, особенно для одностраничных приложений (SPA). Ключевые особенности React:\n1) Компонентный подход: React строится на концепции компонентов, что позволяет разработчикам создавать легко переиспользуемые куски кода;\n2) Виртуальный DOM: React использует виртуальный DOM для отслеживания изменений. Это абстракция реального DOM, что позволяет библиотеке обновлять только те части интерфейса, которые действительно изменились, вместо полного перерендеринга страницы. Это делает React относительно быстрым;\n3) Хуки: Введение хуков позволило использовать состояния и другие возможности классовых компонентов в функциональных компонентах, что сделало код более кратким и чистым;\n4) Сообщество и экосистема: React имеет большое и активное сообщество разработчиков, а также много библиотек и инструментов, созданных сообществом, что облегчает разработку сложных приложений."
    },
    {
      "id": 2,
      "text": "Для чего нужен атрибут key при рендере списков?",
      "hasOptions": false,
      "answer": "Ключи (keys) помогают React определять, какие элементы были изменены, добавлены или удалены. Их необходимо указывать, чтобы React мог сопоставлять элементы массива с течением времени. Лучший способ выбрать ключ — это использовать строку, которая будет явно отличать элемент списка от его соседей. Лучше всего вы будете использовать ID из ваших данных как ключи. Индексы массива тоже можно использовать для этого, но только если элементы массива не добавляются в начало, не переставляются и не удаляются."
    },
    {
      "id": 3,
      "text": "Как работает проп children?",
      "hasOptions": false,
      "answer": "Некоторые компоненты не знают своих потомков заранее. Это особенно характерно для таких компонентов, как Sidebar или Dialog, которые представляют из себя как бы «коробку», в которую можно что-то положить. Для таких компонентов можно использовать специальный проп children, который передаст дочерние элементы сразу на вывод.\n\nПодробнее: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target='_blank'>Документация React (eng)</a>"
    },
    {
      "id": 4,
      "text": "Что такое порталы в React?",
      "hasOptions": false,
      "answer": "Порталы позволяют рендерить дочерние элементы в DOM-узел, который находится вне DOM-иерархии родительского компонента. Типовой случай применения порталов — когда в родительском компоненте заданы стили overflow: hidden или z-index, но вам нужно, чтобы дочерний элемент визуально выходил за рамки своего контейнера. Чаще всего, это диалоговые окна, всплывающие карточки и всплывающие подсказки."
    },
    {
      "id": 5,
      "text": "Что такое Reconciliation (Cверка)?",
      "hasOptions": false,
      "answer": "Это процесс, посредством которого React обновляет DOM. Когда состояние компонента изменяется, React должен рассчитать необходимость обновления DOM. Это делается путем создания виртуального DOM и сравнения его с текущим DOM. В этом контексте виртуальный DOM будет содержать новое состояние компонента."
    },
    {
      "id": 6,
      "text": "Для чего используется хук useEffect в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Выполнения побочных эффектов",
          "isCorrect": true
        },
        { "id": 3, "text": "Мемоизации значений", "isCorrect": false },
        {
          "id": 4,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        }
      ]
    },
    {
      "id": 7,
      "text": "Что будет, если вторым аргументом в useEffect передать пустой массив []?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Ошибка", "isCorrect": false },
        {
          "id": 2,
          "text": "useEffect будет запущен 0 раз",
          "isCorrect": false
        },
        { "id": 3, "text": "useEffect будет запущен 1 раз", "isCorrect": true },
        { "id": 4, "text": "Нет верного ответа", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Какой хук используется для создания состояния в компоненте?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "useEffect", "isCorrect": false },
        { "id": 2, "text": "useState", "isCorrect": true },
        { "id": 3, "text": "useContext", "isCorrect": false },
        { "id": 4, "text": "useReducer", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Какой элемент используется для группировки элементов без добавления дополнительных узлов в DOM?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<Group>", "isCorrect": false },
        { "id": 2, "text": "<Div>", "isCorrect": false },
        { "id": 3, "text": "<Fragment> (<>)", "isCorrect": true },
        { "id": 4, "text": "<List>", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "У нас есть массив со строками (arr), каждую из которых мы хотим отразить на странице. Какой метод массива нужно применить в return компонента?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "{arr.forEach(...)}", "isCorrect": false },
        { "id": 2, "text": "{arr.filter(...)}", "isCorrect": false },
        { "id": 3, "text": "{arr.for(...)}", "isCorrect": false },
        { "id": 4, "text": "{arr.map(...)}", "isCorrect": true }
      ]
    },
    {
      "id": 11,
      "text": "Какой элемент используется для обработки ошибок в дереве компонентов?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "ErrorBoundary", "isCorrect": true },
        { "id": 2, "text": "CatchError", "isCorrect": false },
        { "id": 3, "text": "ErrorWrapper", "isCorrect": false },
        { "id": 4, "text": "ErrorCatcher", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Какой (какие) аргумент(ы) принимает хук useMemo?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Функцию и массив зависимостей", "isCorrect": true },
        { "id": 2, "text": "Функцию и объект опций", "isCorrect": false },
        { "id": 3, "text": "Функцию", "isCorrect": false },
        { "id": 4, "text": "Массив зависимостей", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Для чего используется хук useCallback в React?",
      "hasOptions": true,
      "options": [
        {
          "id": 1,
          "text": "Создания ссылок на DOM элементы",
          "isCorrect": false
        },
        {
          "id": 2,
          "text": "Хранения состояния компонента",
          "isCorrect": false
        },
        {
          "id": 3,
          "text": "Выполнения побочных эффектов",
          "isCorrect": false
        },
        { "id": 4, "text": "Мемоизации функций", "isCorrect": true }
      ]
    }
  ]
}

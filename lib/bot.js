require("dotenv").config();
const {
  Bot,
  webhookCallback,
  Keyboard,
  InlineKeyboard,
  GrammyError,
  HttpError,
} = require("grammy");
const { getRandomQuestion, getCorrectAnswer } = require("./utils");

const bot = new Bot(process.env.BOT_API_KEY);

const TIMEOUT = 10000; // –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (10 —Å–µ–∫—É–Ω–¥)

const withTimeout = (promise, timeout) => {
  const timeoutPromise = new Promise((_, reject) =>
    setTimeout(() => reject(new Error("Request timed out")), timeout)
  );
  return Promise.race([promise, timeoutPromise]);
};

bot.command("start", async (ctx) => {
  const startKeyboard = new Keyboard()
    .text("üíª HTML")
    .text("üé® CSS")
    .row()
    .text("üñ• JavaScript")
    .text("‚öõÔ∏è React")
    .row()
    .text("üìö General")
    .text("üîß GIT")
    .row()
    .text("üé≤ –°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å")
    .resized();

  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø - Frontend Interview Prep Bot ü§ñ \n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∏–Ω—Ç–µ—Ä–≤—å—é –ø–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥—É"
  );
  await ctx.reply("–° —á–µ–≥–æ –Ω–∞—á–Ω–µ–º? –í—ã–±–µ—Ä–∏ —Ç–µ–º—É –≤–æ–ø—Ä–æ—Å–∞ –≤ –º–µ–Ω—é üëá", {
    reply_markup: startKeyboard,
  });
});

bot.hears(
  ["HTML", "CSS", "JavaScript", "React", "General", "GIT", "–°–ª—É—á–∞–π–Ω—ã–π –≤–æ–ø—Ä–æ—Å"],
  async (ctx) => {
    const topic = ctx.message.text.toLowerCase();

    try {
      const { question, questionTopic } = await withTimeout(
        Promise.resolve(getRandomQuestion(topic)),
        TIMEOUT
      );

      if (!question) {
        await ctx.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–æ–ø—Ä–æ—Å –¥–ª—è —ç—Ç–æ–π —Ç–µ–º—ã.");
        return;
      }

      let inlineKeyboard;

      if (question.hasOptions) {
        const buttonRows = question.options.map((option) => [
          InlineKeyboard.text(
            option.text,
            JSON.stringify({
              type: `${questionTopic}-option`,
              isCorrect: option.isCorrect,
              questionId: question.id,
            })
          ),
        ]);

        inlineKeyboard = InlineKeyboard.from(buttonRows);
      } else {
        inlineKeyboard = new InlineKeyboard().text(
          "–£–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç",
          JSON.stringify({
            type: questionTopic,
            questionId: question.id,
          })
        );
      }

      await ctx.reply(question.text, {
        reply_markup: inlineKeyboard,
      });
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞:", error);
      await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –ø–æ–∑–∂–µ.");
    }
  }
);

bot.on("callback_query:data", async (ctx) => {
  const callbackData = JSON.parse(ctx.callbackQuery.data);

  if (!callbackData.type.includes("option")) {
    const answer = getCorrectAnswer(callbackData.type, callbackData.questionId);
    await ctx.reply(answer, {
      parse_mode: "HTML",
      disable_web_page_preview: true,
    });
    await ctx.answerCallbackQuery();
    return;
  }

  if (callbackData.isCorrect) {
    await ctx.reply("–í–µ—Ä–Ω–æ ‚úÖ");
    await ctx.answerCallbackQuery();
    return;
  }

  const answer = getCorrectAnswer(
    callbackData.type.split("-")[0],
    callbackData.questionId
  );
  await ctx.reply(`–ù–µ–≤–µ—Ä–Ω–æ ‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${answer}`);
  await ctx.answerCallbackQuery();
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`, err);

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
  const e = err.error;
  if (e instanceof GrammyError) {
    console.error("Error in request:", e.description);
  } else if (e instanceof HttpError) {
    console.error("Could not contact Telegram:", e);
  } else {
    console.error("Unknown error:", e);
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞
  if (ctx) {
    ctx.reply(
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
    );
  }
});

module.exports = { bot };
